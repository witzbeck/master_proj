[tool.poetry]
authors = ["Alex Beckwith <57322567+witzbeck@users.noreply.github.com>"]
description = "code associated w ms stats capstone"
name = "master-proj"
package-mode = true
packages = [
    { include = "app", from = "src" },
    { include = "utils", from = "src/app" },
    { include = "orm", from = "src/app" },
    { include = "model", from = "src/app" },
]
version = "1.4.6"

[tool.poetry.dependencies]
alexlib         = { git = "http://github.com/witzbeck/alexlib.git", branch = "main" }
baycomp         = "*"
click           = "^8.1.7"
matplotlib      = "^3.9.2"
matplotlib-venn = "^1.1.1"
numpy           = "^2.1.1"
pandas          = "^2.2.3"
pymupdf         = "^1.24.12"
python          = "^3.11"
scikit-learn    = "^1.5.2"
scikit-posthocs = "*"
seaborn         = "^0.13"
tqdm            = "^4.66"

[tool.poetry.group.dev.dependencies]
ipykernel    = "^6.29"
pre-commit   = "^3.8.0"
pytest       = "^8.0"
pytest-cov   = "^5.0"
pytest-mock  = "^3.12"
pytest-xdist = "^3.5"
sqlfluff     = "^3.0"

[tool.poetry.scripts]
get-data = "utils.get_dataset:main"
pipe-etl = "utils.elt_config:pipeline_etl"

[tool.pytest.ini_options]
addopts = [
    "--cov=utils",
    "--cov=model",
    "--cov-report=term-missing",
    "--cov-fail-under=30",
    "--durations=10",
    #"-n", # faster without parallelization
    #"auto",
]
testpaths = ["tests"]

[tool.sqlfluff.core]
dialect         = "postgres"
max_line_length = 120
processes       = 0
rules           = "core"
sql_file_exts   = ".sql"
verbose         = 0

[tool.sqlfluff.layout.type.comma]
line_position  = "leading"
spacing_before = "touch"

[tool.sqlfluff.indentation]
indent_unit       = "space"
indented_joins    = true
indented_then     = false
trailing_comments = "after"

[tool.sqlfluff.layout.type.alias_expression]
align_scope    = "file"
spacing_before = "align"

[tool.sqlfluff.capitalisation]
capitalisation_policy = "lower"

[tool.sqlfluff.rules.aliasing.table]
aliasing = "explcit"

[tool.sqlfluff.rules.aliasing.column]
aliasing = "explicit"

[build-system]
build-backend = "poetry.core.masonry.api"
requires      = ["poetry-core"]


[tool.ruff]
exclude = [
    ".git",
    ".git-rewrite",
    ".ipynb_checkpoints",
    ".pyenv",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "dist",
    "site-packages",
]
extend-include = ["*.ipynb"]
fix = true
indent-width = 4
line-length = 88
target-version = "py311"

[tool.ruff.lint]

extend-select = ["I"] # Allow linter to sort imports.
fixable = ["ALL"] # Allow fix for all enabled rules (when `--fix`) is provided.
select = [
    "E4", # Import order
    "E7", # Import statements
    "E9", # Blank lines
    "F",  # String formatting
    "B",  # Bugbear
    "Q",  # Quotes
    "W",  # PEP8
    "C",  # Complexity
    "I",  # Imports
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$" # Allow unused variables when underscore-prefixed.

[tool.ruff.lint.isort]
known-first-party  = ["alexlib"]
known-local-folder = ["utils", "model", "orm", "app"]


[tool.ruff.lint.per-file-ignores]
"**/{tests,docs,tools}/*" = [
    "E402",
] # Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.

[tool.ruff.format]
indent-style              = "space"
line-ending               = "auto"
quote-style               = "double"
skip-magic-trailing-comma = false

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise OSError",
    "raise RuntimeError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Don't complain about pass or continue:
    "pass",
    "continue",

    # Don't complain about main module code not being run:
    "def main\\(",
]

ignore_errors = true
