name: Version Bump

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
    contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch the last two commits to determine version change

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Determine if version was incremented
      - name: Determine if version was incremented
        id: version_check
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "Current version: $CURRENT_VERSION"

          PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml | grep -Po '(?<=^version = ").*(?=")')
          echo "Previous version: $PREVIOUS_VERSION"

          if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
            echo "Version has not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "major_changed=false" >> $GITHUB_OUTPUT
            echo "minor_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version has changed"
            echo "version_changed=true" >> $GITHUB_OUTPUT

            IFS='.' read -ra CUR_VER_PARTS <<< "$CURRENT_VERSION"
            IFS='.' read -ra PREV_VER_PARTS <<< "$PREVIOUS_VERSION"

            if [ "${CUR_VER_PARTS[0]}" != "${PREV_VER_PARTS[0]}" ]; then
              echo "Major version has changed"
              echo "major_changed=true" >> $GITHUB_OUTPUT
              echo "minor_changed=false" >> $GITHUB_OUTPUT
            elif [ "${CUR_VER_PARTS[1]}" != "${PREV_VER_PARTS[1]}" ]; then
              echo "Minor version has changed"
              echo "major_changed=false" >> $GITHUB_OUTPUT
              echo "minor_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Only patch version has changed"
              echo "major_changed=false" >> $GITHUB_OUTPUT
              echo "minor_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Bump Patch Version
      - name: Bump Patch Version
        if: |
          github.event_name == 'push' &&
          (
            steps.version_check.outputs.version_changed == 'false' ||
            (steps.version_check.outputs.major_changed == 'false' && steps.version_check.outputs.minor_changed == 'false')
          )
        run: poetry version patch

      # Bump Minor Version on PR merge to main
      - name: Bump Minor Version
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.merged == true
        run: poetry version minor

      # Configure Git
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Commit Changes
      - name: Commit Version Bump
        run: |
          if git diff --quiet pyproject.toml; then
            echo "No version change to commit"
          else
            git add pyproject.toml
            git commit -m "Bump version [skip ci]"
          fi

      # Push Changes
      - name: Push Changes
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin HEAD:${{ github.ref }}
