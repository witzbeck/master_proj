name: Master's Project | Compile LaTeX PDF

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/latex-compile.yaml'
      - 'paper/**'
      - 'figures/**'

permissions:
  contents: write

jobs:
  build_pdf:
    runs-on: [ ubuntu-latest ]
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        sparse-checkout: |
          paper/
          figures/
          .github/workflows/latex-compile.yaml

    #----------------------------------------------
    # set up Tex Live
    #----------------------------------------------
    - name: Compile LaTeX PDF
      uses: xu-cheng/latex-action@v3
      with:
        working_directory: paper
        root_file: paper.tex
        continue_on_error: true

    #----------------------------------------------
    # uploads the pdf as an artifact
    #----------------------------------------------
    - name: upload pdf
      uses: actions/upload-artifact@v3
      with:
        name: PDF
        path: 'paper/paper.pdf'

  release:
    needs: build_pdf
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
  
      - name: Download PDF
        uses: actions/download-artifact@v3
        with:
          name: PDF
          path: paper

      # install poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Bump Version
      - name: Bump Patch Version
        run: poetry version patch
  
      # Configure Git
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
  
      # Commit Changes
      - name: Commit Version Bump
        run: |
          git add pyproject.toml
          git commit -m "Bump version [skip ci]"
  
      # Push Changes
      - name: Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.ref }}
  
      # Get Updated Version
      - name: Get Updated Version With Poetry
        id: get_version
        run: echo version=$(poetry version | cut -d' ' -f2) >> $GITHUB_OUTPUT
  
      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: "The latest compiled PDF of the paper."
          draft: false
          prerelease: false
  
      # Upload Release Asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./paper/paper.pdf
          asset_name: paper.pdf
          asset_content_type: application/pdf
